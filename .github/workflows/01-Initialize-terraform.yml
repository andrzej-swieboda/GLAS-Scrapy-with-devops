name: 01-Installing and initiating Terraform

on:
  workflow_dispatch:
    

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'us-east-1'

    - name: Install Terraform
      uses: little-core-labs/install-terraform@v2.0.0
      with:
        version: 1.2.6
    
    - name: Terraform prepare
      working-directory: ./Terraform_INIT
      run:
        set -e
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        export AWS_REGION="us-east-1"

    - name: Make bucket for terraform state file
      run: |
        aws s3api create-bucket --bucket glas-scrapybackend-dev --region us-east-1
        aws s3api put-object --bucket glas-scrapybackend-dev --key production
      

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.REGION }}

    - name: AWS Plan Copy
      id: copyfrom
      run: aws s3 cp s3://glas-scrapybackend-dev/production/terraform.tfstate production/terraform.tfstate
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      continue-on-error: true # incase infra does not exist

    - name: Terraform apply
      working-directory: ./Terraform_INIT
      run: |
        terraform init -reconfigure -upgrade
        terraform validate
        terraform plan
        terraform apply -auto-approve

    - name: AWS Plan Copy
      if: github.event_name == 'push' && steps.apply.outcome == 'success'
      run: aws s3 cp terraform.tfstate s3://glas-scrapybackend-dev/production/terraform.tfstate
      id: copy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.REGION }}